    tagDm Data(chaindata);
    cout<<endl;
    const auto nentries = chaindata->GetEntries();
    cout<<"- - - -the initial number of events for chaindata  =  "<< nentries <<endl;

    TTree *oldtree = new TTree("oldtree","");
    Double_t    m_mass;
    oldtree->Branch("m_mass"  ,  &m_mass ,"m_mass/D" );

    for (auto i : ROOT::TSeqI(nentries))
    {
        Data.GetEntry(i);
        if(CUT_CUT && Data.mDp <=2.5)
        {
            m_mass =  Data.mmass;
            oldtree->Fill();
        }       
    }
    oldtree->Print();
    cout<<"* * * * after cut- - - the number of chaindata events =  "<<  (int) oldtree->GetEntries()<<endl;

    RooDataSet *rawdata = new RooDataSet("rawdata", "rawdata", RooArgSet(mmass),Import(*oldtree));
    
    cout<<"-------------after cut, the number of events = "<<rawdata->sumEntries()<<" * *     weight 1 (should = 1)  =  "<< rawdata->weight() <<endl;
   
    RooFitResult* r = ftot.fitTo(*rawdata, Minos(kFALSE), Extended(true), Save(kTRUE));         
   
       
    cout<<endl;
    cout<<endl;
    // 获取拟合结果中的参数值
    Double_t nGauss1 = nsig.getVal() * fsig.getVal();
    Double_t nGauss2 = nsig.getVal() * (1 - fsig.getVal());

    // 打印拟合结果
    cout << "Number of signal events from gauss1: " << nGauss1 << endl;
    cout << "Number of signal events from gauss2: " << nGauss2 << endl;
    cout<<endl;
    cout<<endl;
    ///////////////////////////////////////////////////////////////////////////////
    
    cout<<"output_begin_output_begin"<<endl;
    cout<<"* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"<<endl; 
    cout<<endl;
    r->printValue(cout);
    r->Print();
    cout<<endl;
    cout<<"* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"<<endl;
    cout<<"output_end_output_end"<<endl;
    cout<<endl;
    cout<<endl;
    cout<<endl;

    /////////////////////////////////////////////////////////////////////////////////

    TCanvas *canvas1=new TCanvas("canvas1","spec",200,10,800,700);
    RooPlot* frame = mmass.frame(50);
    
    rawdata->plotOn(frame);   
    //rawdata->plotOn(frame);
    //rawdata->plotOn(frame,DataError(RooAbsData::SumW2)) ;  //* * * i add

    ftot.plotOn(frame);
    ftot.plotOn(frame, Components("gauss1"), LineColor(kGreen));
    ftot.plotOn(frame, Components("gauss2"), LineColor(6));   // -- - i add  xxxxxxxx
    ftot.plotOn(frame, Components("fbkg"), LineColor(kRed));

    mean1.setPlotLabel("m_{01}");
    sigma1.setPlotLabel("#sigma_{m1}");
    mean2.setPlotLabel("m_{02}");
    sigma2.setPlotLabel("#sigma_{m2}");
    fsig.setPlotLabel("f_{sig}");

    nsig.setPlotLabel("N_{sig}");
    nbkg.setPlotLabel("N_{bkg}");

    ftot.paramOn(frame, Parameters(RooArgSet(mean1,sigma1,mean2,sigma2,fsig,nsig,nbkg)),Format("NE", AutoPrecision(1)),Layout(0.7, 0.99, 0.98));
    //ftot.paramOn(frame, Parameters(RooArgSet(mean,sigma,nsig)),Format("NE", AutoPrecision(1)),Layout(0.66, 0.99, 0.98));
    
  
    frame->SetXTitle("Mass D^{0} (GeV/c^{2})");
    frame->SetYTitle("Events/4 MeV/c^{2}");
    frame->GetXaxis()->CenterTitle();
    frame->GetYaxis()->CenterTitle();
    frame->chiSquare(2);
    frame->Draw();

    TPaveText *pt = new TPaveText(0.3, 0.6, 0.4, 0.7,"blNDC");
    pt->SetBorderSize(0);
    pt->SetTextSize(0.05);
    pt->SetFillColor(0);
    pt->AddText("HHH");
    pt->Draw("sames");
    canvas1->SaveAs("XXX.png");

    cout<<"* * * * * * * * * * * * * * * * * * * * * * *"<<endl;
    cout<<"* * * hello world, the program execution completed."<<endl;
    cout<<"* * * * * * * * * * * * * * * * * * * * * * *"<<endl;
    
    fclose(stdout); 

    //////////////////////////////////////////////////////////////////////////////////
    delete chaindata;
    delete oldtree;
    delete pt;
    delete rawdata;
    delete canvas1;
}