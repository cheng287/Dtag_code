* * First, you should prepare the 'deacy_mode.txt' and 'infor.txt' .
    The 'decay_mode.txt' is the DTag Decay Mode , such as 0 , 1, 50 ,200  and so on.
    The 'infor.txt' includes the energy point number, luminosity, run number low, run number high and center-of-mass energy information.

    For example,   
                decay_mode.txt             |                           infor.txt
                  0                        |                 4740  210   65208  65321   4.74          
                  1                        |                 4750  211   65322  65494   4.75        
                  2                        |                 4780  212   65495  65645   4.78      
                                           |                 4840  213   65646  65864   4.84                
            




* * Second,
    The 'hello_mode.sh', 'infor.head', 'infor.tail' and 'sub_make_hello_mode.sh' are a set.
    To execute this shell code, you just need to enter :
                  * * *           ./hello_mode.sh jobname  [jobN] [fileN]
    such as  ./hello_mode.sh  data   30   30    
    
    (1) When you enter 3 parameters, the second parameter does not work, 
        so this command will generate a series C++ jobs (i do not know how many [jobN]) and each c++ file contains 30 root files. 
    (2) This code is used  to generate new root file.
        By executing this code, it will extract information from the existing root file and save the result as a new root file.
    (3) It will generate a series of directories, for example, 
                   mode_0, mode_1 ,mode_2, mode_50, and root. 
        Under the root directory, it includes subdirectories such as mode_0, mode_1, mode_50 and so on.
              ./root/mode_0    ./root/mode_1  and so on


     To submit these works, you just enter:
            ./sub_make_hello_mode.sh jobname
      such as   ./sub_make_hello_mode.sh data
      or 
        ./run_mode.sh jobname (use your local terminal)



* * Then
    The 'hello_fit.sh', 'fitjob.head', 'fitjob.tail' and 'sub_make_hello_fit.sh' are a set.
    To execute this shell code, you just need to enter :
                 * * *            ./hello_fit.sh jobname  [jobN] [fileN]
    such as  ./hello_fit.sh  data   50   100    
    
    (1) When you enter 3 parameters, the second parameter does not work, 
        so this command will generate a series mass_fit* C++ jobs (i do not know how many [jobN]) and each mass_fit* C++ file contains 100 root files. 
        
        ! ! ! ! ! !  * * * Be careful * * * ! ! ! ! !
        Here, there is only one fitting code file for different decay modes at different energy points. 
        The last file number should be larger to ensure that only one file is generated.

    (2) It will generate a fit directorie, which includes mode_0, mode_1 ,mode_2, mode_50 and so on.
                   ./fit/mode_0    ./fit/mode_1   ./fit/mode_2    ./fit/mode_50
        Under the fit directory, it includes subdirectories such as mode_0, mode_1, mode_50 and so on.

      
      To submit these works, you just enter:
            ./sub_make_hello_fit.sh jobname    (Submit to the cluster)
        or 
          ./run_fit.sh jobname     (use your local terminal)
      such as   ./sub_make_hello_fit.sh data




* * Finally,
    you just need to enter :
          * * *           ./find_fit.sh
    the fit result information will generate.
    such as  'result_mode_0.txt' , 'result_mode_1.txt' and so on.




  ! ! ! ! ! * * * * Friendly reminder, you should change the path in the 'hello_mode.sh', 'hello_fit.sh',  'find_fit.sh' * * * ! ! ! ! ! ! ! ! !
       'hello_mode.sh'  :         DataParentPath1=/besfs5/groups/tauqcd/songwm/Rc_study/Rc/4740to4960/outputroot     to /besfs5/groups/****/somepath   (Must Change)
       'hello_fit.sh'   :         DataParentPath1=/workfs2/bes/liucheng/try/root                                     to /besfs5/groups/***/root        (Default current path, no need to change)
       'find_fit.sh'    :         DataParentPath1=/workfs2/bes/liucheng/try/fit                                      to  /besfs5/groups/***/fit        (Default current path, no need to change)


    That should be it.




////////////////////////////////////////////////////////////////////////////////////////////////
(1)首先
  准备好
  deacy_mode.txt  infor.txt   为共有文件，必须有，不能随意改变

                decay_mode.txt             |                           infor.txt
                  0                        |                 4740  210   65208  65321   4.74          
                  1                        |                 4750  211   65322  65494   4.75        
                  2                        |                 4780  212   65495  65645   4.78      
                                           |                 4840  213   65646  65864   4.84             

(2)其次
   ./hello_mode.sh data  20 25      (生成新 root文件的cpp文件)
    
    infor.head   infor.tail 
    
    提交作业  ./sub_make_hello_mode.sh jobname  (提交集群)
             ./run_mode.sh jobname   (本地终端)
 
 注意 : 如果让每个 job 里面只含有 1 个root file , 必须将 if [ `expr ${iline} % ${fileN}` == 1 ] 改为 if [ `expr ${iline} % ${fileN}` == 0 ]  在 hello_mode.sh 里面. 生成 ./hello_mode.sh data 400 1


(3)然后
   ./hello_fit.sh data  2  100                * * * * 这里因为不同的拟合代码文件只有一个， 最后面的文件数字要大,从而保证只生成一个文件    (生成用于拟合的 cpp 文件)
   
    fitjob.head   fitjob.tail  (for D0 , D+-)
    Ds_fitjob.head  Ds_fitjob.head   (for Ds)

   注意 : 如果让每个 job 里面只含有 1 个root file , 必须将 if [ `expr ${iline} % ${fileN}` == 1 ] 改为 if [ `expr ${iline} % ${fileN}` == 0 ]  一般是在 hello_fit.sh 里面. 生成 ./hello_fit.sh data 400 1

    提交作业  ./sub_make_hello_fit.sh jobname  (提交集群)
             ./run_fit.sh jobname   (本地终端)

* * * * *

(4)最后
./find_fit.sh            结果在 result_mode_i.txt 里面

其中,root ,fit, mode_i 等目录是自动生成的       


(5)拟合失败的作业会放在 ./fit/mode_i/failed 目录下
    1.修改 re_fitjob.head 和 re_Ds_fitjob.head 里面的参数条件
    2.重新生成修改后的作业    ./re_hello_fit.sh 
    3.运行重新修改后的作业  ./re_run_fit.sh jobname
    4.再次查看是否拟合成功  ./re_find_fit.sh      结果在 re_result_mode_i.txt 里面






//////////////////////////////////////////////////////////////////////////////////////////////

如果让每个 job 里面只含有 1 个root file , 必须将 if [ `expr ${iline} % ${fileN}` == 1 ] 改为 if [ `expr ${iline} % ${fileN}` == 0 ]  一般是在 hello_fit.sh 里面
